import pytsk3
import yara
import os
import warnings

#For whoever will use this in the future, don't forget to use VMs, u gonna thank me later

warnings.filterwarnings("ignore", category=RuntimeWarning, message="too many matches for string")

count_folder = 0

def compile_yara_rules(yara_rules_dir):
    # collect YARA files from given dir
    rule_files = {}
    for root, _, files in os.walk(yara_rules_dir):
        for file in files:
            if file.endswith('.yar') or file.endswith('.yara'):
                file_path = os.path.join(root, file)
                rule_files[file_path] = file_path

    # compile YARA rules
    try:
        compiled_rules = yara.compile(filepaths=rule_files)
    except yara.SyntaxError as e:
        print(f"Error compiling YARA rules: {e}")
        raise
    return compiled_rules


def scan_file(file_path, yara_rules):
    matches = yara_rules.match(file_path)
    return matches

def analyze_disk_image(disk_image_path, yara_rules):
    img_info = pytsk3.Img_Info(disk_image_path)
    fs_info = pytsk3.FS_Info(img_info)

    def scan_directory(directory, parent_path=''):
        count = 0

        global count_folder
        count_folder += 1

        for entry in directory:
            if entry.info.name.name in [b'.', b'..']:
                continue
            entry_name = entry.info.name.name.decode('utf-8', 'ignore')
            full_path = os.path.join(parent_path, entry_name)

            if entry_name not in ['$OrphanFiles']: # getting stuck because of OrphanFiles, only solution for the moment
                if entry.info.meta.type == pytsk3.TSK_FS_META_TYPE_DIR:
                    sub_directory = entry.as_directory()
                    scan_directory(sub_directory, full_path)
                else:
                    file_size = entry.info.meta.size
                    try:
                        file_data = entry.read_random(0, file_size)
                        matches = yara_rules.match(data=file_data)
                        for match in matches:
                            count += 1
                            print(f"Count: folder {count_folder}, file {count} - Found match: {match.rule} in file {full_path} at {match.strings}")
                            # print(count)
                    except Exception as e:
                        pass

    root_directory = fs_info.open_dir('/')
    scan_directory(root_directory)


def main(memory_dump_path, disk_image_path, yara_rules_dir):
    yara_rules = compile_yara_rules(yara_rules_dir)

    if memory_dump_path and os.path.exists(memory_dump_path):
        print("Started memory dump analysis")
        matches = scan_file(memory_dump_path, yara_rules)
        if matches:
            for match in matches:
                print(f"Rule: {match.rule}, Tags: {match.tags}, Meta: {match.meta}") # TODO: format the outputs in a better manner

    if disk_image_path:
        print("Started disk image analysis")
        analyze_disk_image(disk_image_path, yara_rules)


if __name__ == "__main__":
    memory_dump_path = "stuxnet.vmem"
    disk_image_path = "Malicious Disk Image.iso"
    yara_rules_dir = "yara-indexes"

    main(memory_dump_path, disk_image_path, yara_rules_dir)
